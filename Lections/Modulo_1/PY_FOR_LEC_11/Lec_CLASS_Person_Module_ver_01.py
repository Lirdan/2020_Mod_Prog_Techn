# -*- coding: utf-8 -*-
"""
ЛЕКЦИЯ № 10   ПРИМЕР СОЗДАНИЯ КЛАССА
           ВЕРСИЯ 1

Created on Tue Mar 10 18:29:17 2020

БАШКОВ Е.А.

"""


class Person:
    '''
    КЛАСС "ПЕРСОНА"
    ТРИ АРГУМЕНТА
        name - строка ИМЯ ФАМИЛИЯ
        job  - строка ДОЛЖНОСТЬ
        pay  - целое ВЫПЛАТЫ
    '''
    def __init__(self, name, job = None, pay=0):  # Конструктор класса принимает три аргумента
        self.name = name                 # Заполняет поля при создании
        self.job = job                   # self - нового экземпляра класса
        self.pay = pay

    # Метод извлечение ФАМИЛИИ
    def lastName (self):
        return self.name.split()[-1]

    # Метод формирования строки описания персоны !!! явно задаем __str__
    def __str__ (self):
        return 'Персона: %s | Позиція: %s | Виплати: %s'  % (self.name, self.job, self.pay)

    # Метод увеличения выплат
    def raisePay (self, percent):
        '''
        Повышение выплат
            percent - целое - на сколько процентов повышаются выплты
        '''
        self.pay = int(self.pay*(1+percent*0.01))



class Student (Person):
    '''
    КЛАСС "СТУДЕНТ" КАК ПОДКЛАСС СУПЕРКЛАССА "ПЕРСОНА"
    ДВА АРГУМЕНТА
        name - строка ИМЯ ФАМИЛИЯ
        pay  - целое ВЫПЛАТЫ
        !!! job 'Студент' - вставляется автоматически
    '''

    def __init__(self, name, pay):  # Конструктор класса принимает ДВА аргумента
        Person.__init__(self, name, 'Студент', pay) # Заполняет поля при создании СТУДЕНТА
        # Здесь ЯВНОЕ обращение к методу суперкласса

class Teacher (Person):
    '''
    КЛАСС "ПРЕПОДАВАТЕЛЬ" КАК ПОДКЛАСС СУПЕРКЛАССА "ПЕРСОНА"
    ДВА АРГУМЕНТА
        name - строка ИМЯ ФАМИЛИЯ
        pay  - целое ВЫПЛАТЫ
        !!! job 'Викладач' - вставляется автоматически

    '''

    def __init__(self, name, pay):  # Конструктор класса принимает три аргумента
        Person.__init__(self, name, 'Викладач', pay) # Заполняет поля при создании преподавателя
        # Здесь ЯВНОЕ обращение к методу суперкласса

    # Переопределение метода увеличения выплат для преподавателей с учетом бонуса
    def raisePay (self, percent, bonus = 5):
        '''
        Повышение выплат
            percent - целое - на сколько процентов повышаются выплты
            bonus  - целое , по умолчанию 5 процентов
        '''
        Person.raisePay(self, percent + bonus)
        # Здесь ЯВНОЕ обращение к методу суперкласса

class Manager (Person):
    '''
    СОЗДАЕТСЯ КЛАСС "АДМИНИСТРАТОР" КАК ПОДКЛАСС СУПЕРКЛАССА "ПЕРСОНА"

    '''

    def __init__(self, name, pay):  # Конструктор класса принимает три аргумента
        Person.__init__(self, name, 'Менеджер', pay) # Заполняет поля при создании преподавателя
        # Здесь ЯВНОЕ обращение к методу суперкласса

    # !!! Переопределение метода увеличения выплат для преподавателей с учетом бонуса
    def raisePay (self):
        self.pay = 2*self.pay
        # ЯВНОЕ ПЕРЕОПРЕДЕЛЕНИЕ




# ТЕСТИРОВАНИЕ КЛАССА
if __name__ == '__main__':
    print('--- ТЕСТИРОВАНИЕ КЛАССА ---')
    she = Person ('Ольга Веліканова', job = 'Студент', pay = 1000) # Экземпляр через INIT
    he  = Person ('Павло Вороний')                                   # Экземпляр через INIT

    print('---НЕПОСРЕДСТВЕННАЯ РАБОТА С БАЗОВЫМ КЛАССОМ *СУПЕРКЛАССОМ*')
    print(she.name, she.job, she.pay) # Извлечение и печать атрибутов экземпляра
    print(he.name,   he.job,  he.pay) # Извлечение и печать атрибутов экземпляра

    print(she.lastName(), he.lastName()) # Обращение к методам
    she.raisePay(10)
    print(she.name, she.job, she.pay) # Извлечение и печать атрибутов экземпляра

    he.job = 'Викладач'
    he.pay = 5000
    print('---ИСПОЛЬЗОВАНИЕ АТРИБУТА STR')
    print(she) # Извлечение и печать атрибутов экземпляра
    print( he) # Извлечение и печать атрибутов экземпляра

    print('\n ---РАБОТА С ПОДКЛАССОМ СТУДЕНТ')
    stud_1 = Student('Ірина Полякова',1100)
    print(stud_1)
    stud_2 = Student('Петро Сидорчук',1100)
    print(stud_2)
    stud_2.raisePay(5)
    print(stud_2)

    print('\n---РАБОТА С ПОДКЛАССОМ ПЕРПОДАВАТЕЛЬ')
    teach_1 = Teacher ('Олексій Полвинка',4400)
    print(teach_1)
    teach_1 = Teacher ('Тетяна Кровчак',5500)
    print(teach_1)

    teach_1.raisePay(10)
    print(teach_1)

    print('\n---РАБОТА С ПОДКЛАССОМ АДМИНИСТРАТОР')
    manager_1 = Manager ('Віктор Зайцев',6000)
    print(manager_1)
    manager_1.raisePay()
    print(manager_1)